name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, build, or custom)'
        required: true
        default: 'build'
        type: choice
        options:
          - patch
          - build
          - custom
      custom_version:
        description: 'Custom version (only used if release_type is custom)'
        required: false

env:
  BINARY_NAME: unwarp

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: x86_64
            name: Intel
          - os: macos-14
            arch: arm64
            name: Apple Silicon
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        # Determine version based on trigger
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION="${GITHUB_REF_NAME#v}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Use version.sh to calculate the version
          chmod +x version.sh
          case "${{ github.event.inputs.release_type }}" in
            patch)
              VERSION=$(./version.sh patch | grep "New version:" | awk '{print $3}' | sed 's/\x1b\[[0-9;]*m//g')
              ;;
            build)
              VERSION=$(./version.sh build | grep "New version:" | awk '{print $3}' | sed 's/\x1b\[[0-9;]*m//g')
              ;;
            custom)
              VERSION="${{ github.event.inputs.custom_version }}"
              ;;
          esac
        else
          # Default: use git tag
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "dev")
        fi
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION_TAG=v${VERSION}" >> $GITHUB_OUTPUT
        echo "Building version: ${VERSION}"

    - name: Build binary
      run: |
        chmod +x build.sh
        # Pass version to build script
        ./build.sh "${{ steps.version.outputs.VERSION }}"
        # Rename binary with architecture
        mv unwarp unwarp-${{ matrix.arch }}

    - name: Upload architecture-specific binary
      uses: actions/upload-artifact@v4
      with:
        name: unwarp-${{ matrix.arch }}
        path: unwarp-${{ matrix.arch }}
        if-no-files-found: error

  create-universal-binary:
    name: Create Universal Binary and Release
    needs: build
    runs-on: macos-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download Intel binary
      uses: actions/download-artifact@v4
      with:
        name: unwarp-x86_64
        path: .

    - name: Download ARM64 binary
      uses: actions/download-artifact@v4
      with:
        name: unwarp-arm64
        path: .

    - name: Create universal binary
      run: |
        # Create universal binary
        lipo -create -output unwarp unwarp-x86_64 unwarp-arm64
        
        # Verify architectures
        echo "Universal binary architectures:"
        lipo -info unwarp
        
        # Make it executable
        chmod +x unwarp

    - name: Determine version
      id: version
      run: |
        # Use the same version determination logic as the build job
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION="${GITHUB_REF_NAME#v}"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Use version.sh to calculate the version
          chmod +x version.sh
          case "${{ github.event.inputs.release_type }}" in
            patch)
              VERSION=$(./version.sh patch | grep "New version:" | awk '{print $3}' | sed 's/\x1b\[[0-9;]*m//g')
              ;;
            build)
              VERSION=$(./version.sh build | grep "New version:" | awk '{print $3}' | sed 's/\x1b\[[0-9;]*m//g')
              ;;
            custom)
              VERSION="${{ github.event.inputs.custom_version }}"
              ;;
          esac
        else
          # Default: use git tag
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "dev")
        fi
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION_TAG=v${VERSION}" >> $GITHUB_OUTPUT
        echo "Building packages for version: ${VERSION}"

    - name: Setup packaging structure
      run: |
        # Create packaging directory structure
        mkdir -p packaging/payload/usr/local/libexec
        mkdir -p packaging/scripts
        
        # Create postinstall script using printf to avoid heredoc issues
        printf '#!/bin/bash\n' > packaging/scripts/postinstall
        printf 'set -e\n' >> packaging/scripts/postinstall
        printf 'INSTALL_PATH="/usr/local/libexec/.unwarp"\n' >> packaging/scripts/postinstall
        printf 'if [ -f "$INSTALL_PATH" ]; then\n' >> packaging/scripts/postinstall
        printf '    chown root:wheel "$INSTALL_PATH"\n' >> packaging/scripts/postinstall
        printf '    chmod 4755 "$INSTALL_PATH"\n' >> packaging/scripts/postinstall
        printf '    echo "unwarp: Set setuid permissions on $INSTALL_PATH"\n' >> packaging/scripts/postinstall
        printf '    logger -t unwarp-installer "Installation completed successfully"\n' >> packaging/scripts/postinstall
        printf 'else\n' >> packaging/scripts/postinstall
        printf '    echo "unwarp: Warning - $INSTALL_PATH not found"\n' >> packaging/scripts/postinstall
        printf '    exit 1\n' >> packaging/scripts/postinstall
        printf 'fi\n' >> packaging/scripts/postinstall
        printf 'exit 0\n' >> packaging/scripts/postinstall
        chmod +x packaging/scripts/postinstall

    - name: Build universal package
      run: |
        chmod +x build-pkg.sh
        ./build-pkg.sh "${{ steps.version.outputs.VERSION }}"
        # Rename to indicate universal
        mv unwarp-${{ steps.version.outputs.VERSION }}.pkg unwarp-${{ steps.version.outputs.VERSION }}-universal.pkg
        if [ -f unwarp-${{ steps.version.outputs.VERSION }}-signed.pkg ]; then
          mv unwarp-${{ steps.version.outputs.VERSION }}-signed.pkg unwarp-${{ steps.version.outputs.VERSION }}-universal-signed.pkg
        fi

    - name: Build architecture-specific packages
      run: |
        # Ensure directory exists
        mkdir -p packaging/payload/usr/local/libexec
        
        # Build Intel package
        cp unwarp-x86_64 packaging/payload/usr/local/libexec/.unwarp
        ./build-pkg.sh "${{ steps.version.outputs.VERSION }}"
        mv unwarp-${{ steps.version.outputs.VERSION }}.pkg unwarp-${{ steps.version.outputs.VERSION }}-intel.pkg
        if [ -f unwarp-${{ steps.version.outputs.VERSION }}-signed.pkg ]; then
          mv unwarp-${{ steps.version.outputs.VERSION }}-signed.pkg unwarp-${{ steps.version.outputs.VERSION }}-intel-signed.pkg
        fi
        
        # Build ARM64 package
        cp unwarp-arm64 packaging/payload/usr/local/libexec/.unwarp
        ./build-pkg.sh "${{ steps.version.outputs.VERSION }}"
        mv unwarp-${{ steps.version.outputs.VERSION }}.pkg unwarp-${{ steps.version.outputs.VERSION }}-arm64.pkg
        if [ -f unwarp-${{ steps.version.outputs.VERSION }}-signed.pkg ]; then
          mv unwarp-${{ steps.version.outputs.VERSION }}-signed.pkg unwarp-${{ steps.version.outputs.VERSION }}-arm64-signed.pkg
        fi

    - name: Calculate checksums
      id: checksums
      run: |
        # Calculate checksums for all artifacts
        shasum -a 256 unwarp > unwarp.sha256
        shasum -a 256 unwarp-x86_64 >> unwarp.sha256
        shasum -a 256 unwarp-arm64 >> unwarp.sha256
        shasum -a 256 unwarp-*.pkg >> unwarp.sha256
        
        # Also create individual checksum files
        for file in unwarp unwarp-x86_64 unwarp-arm64 unwarp-*.pkg; do
          if [ -f "$file" ]; then
            shasum -a 256 "$file" > "${file}.sha256"
          fi
        done
        
        # Output for release notes
        echo "CHECKSUMS<<EOF" >> $GITHUB_OUTPUT
        cat unwarp.sha256 >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        cat > release_notes.md << EOF
        ## unwarp ${{ steps.version.outputs.VERSION }}
        
        Emergency disconnect tool for Cloudflare WARP on macOS. Enables privileged incident responders to forcefully disconnect WARP during outages when the Cloudflare WARP control and/or data plane are misbehaving.
        
        ### Downloads
        
        **Recommended: Universal Package (works on all Macs)**
        - [\`unwarp-${{ steps.version.outputs.VERSION }}-universal.pkg\`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION_TAG }}/unwarp-${{ steps.version.outputs.VERSION }}-universal.pkg) - Works on both Intel and Apple Silicon Macs
        
        **Architecture-Specific Packages**
        - [\`unwarp-${{ steps.version.outputs.VERSION }}-intel.pkg\`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION_TAG }}/unwarp-${{ steps.version.outputs.VERSION }}-intel.pkg) - Intel Macs only
        - [\`unwarp-${{ steps.version.outputs.VERSION }}-arm64.pkg\`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION_TAG }}/unwarp-${{ steps.version.outputs.VERSION }}-arm64.pkg) - Apple Silicon Macs only
        
        **Raw Binaries (for manual installation)**
        - [\`unwarp\`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION_TAG }}/unwarp) - Universal binary (Intel + Apple Silicon)
        - [\`unwarp-x86_64\`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION_TAG }}/unwarp-x86_64) - Intel only
        - [\`unwarp-arm64\`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION_TAG }}/unwarp-arm64) - Apple Silicon only
        
        ### Installation
        
        **Option 1: Package Installer (Recommended for JAMF)**
        \`\`\`bash
        # Download and install the universal package
        curl -LO https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION_TAG }}/unwarp-${{ steps.version.outputs.VERSION }}-universal.pkg
        sudo installer -pkg unwarp-${{ steps.version.outputs.VERSION }}-universal.pkg -target /
        \`\`\`
        
        **Option 2: Direct Binary Installation**
        \`\`\`bash
        # Download universal binary
        curl -LO https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION_TAG }}/unwarp
        chmod +x unwarp
        
        # Install with proper permissions
        sudo mkdir -p /usr/local/libexec
        sudo cp unwarp /usr/local/libexec/.unwarp
        sudo chown root:wheel /usr/local/libexec/.unwarp
        sudo chmod 4755 /usr/local/libexec/.unwarp
        \`\`\`
        
        ### Architecture Support
        
        This release includes a universal binary that runs natively on:
        - ✅ Intel-based Macs (x86_64)
        - ✅ Apple Silicon Macs (arm64/M1/M2/M3)
        
        ### Changes
        EOF
        
        if [ -n "$LAST_TAG" ]; then
          echo "" >> release_notes.md
          git log --oneline --no-merges ${LAST_TAG}..HEAD | sed 's/^/- /' >> release_notes.md
        else
          echo "- Initial release with universal binary support" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Checksums" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        cat unwarp.sha256 >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION_TAG }}
        name: unwarp ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        files: |
          unwarp
          unwarp-x86_64
          unwarp-arm64
          unwarp-*.pkg
          unwarp*.sha256

    - name: Update latest tag
      run: |
        git tag -f latest
        git push origin latest --force